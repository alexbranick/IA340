{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Collect Tweets into MongoDB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Install Python libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pymongo\n",
      "  Downloading pymongo-3.11.0-cp36-cp36m-manylinux2014_x86_64.whl (508 kB)\n",
      "\u001b[K     |████████████████████████████████| 508 kB 15.4 MB/s eta 0:00:01\n",
      "\u001b[?25hInstalling collected packages: pymongo\n",
      "Successfully installed pymongo-3.11.0\n",
      "\u001b[33mWARNING: You are using pip version 20.0.2; however, version 20.2.4 is available.\n",
      "You should consider upgrading via the '/home/ec2-user/anaconda3/envs/python3/bin/python -m pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install pymongo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pymongo[srv] in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (3.11.0)\n",
      "Collecting dnspython<2.0.0,>=1.16.0; extra == \"srv\"\n",
      "  Downloading dnspython-1.16.0-py2.py3-none-any.whl (188 kB)\n",
      "\u001b[K     |████████████████████████████████| 188 kB 23.1 MB/s eta 0:00:01\n",
      "\u001b[?25hInstalling collected packages: dnspython\n",
      "Successfully installed dnspython-1.16.0\n",
      "\u001b[33mWARNING: You are using pip version 20.0.2; however, version 20.2.4 is available.\n",
      "You should consider upgrading via the '/home/ec2-user/anaconda3/envs/python3/bin/python -m pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install pymongo[srv]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: dnspython in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (1.16.0)\n",
      "\u001b[33mWARNING: You are using pip version 20.0.2; however, version 20.2.4 is available.\n",
      "You should consider upgrading via the '/home/ec2-user/anaconda3/envs/python3/bin/python -m pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install dnspython"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting twitter\n",
      "  Downloading twitter-1.18.0-py2.py3-none-any.whl (54 kB)\n",
      "\u001b[K     |████████████████████████████████| 54 kB 2.5 MB/s  eta 0:00:01\n",
      "\u001b[?25hInstalling collected packages: twitter\n",
      "Successfully installed twitter-1.18.0\n",
      "\u001b[33mWARNING: You are using pip version 20.0.2; however, version 20.2.4 is available.\n",
      "You should consider upgrading via the '/home/ec2-user/anaconda3/envs/python3/bin/python -m pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install twitter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tweepy\n",
      "  Downloading tweepy-3.9.0-py2.py3-none-any.whl (30 kB)\n",
      "Requirement already satisfied: six>=1.10.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from tweepy) (1.14.0)\n",
      "Requirement already satisfied: requests[socks]>=2.11.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from tweepy) (2.22.0)\n",
      "Collecting requests-oauthlib>=0.7.0\n",
      "  Downloading requests_oauthlib-1.3.0-py2.py3-none-any.whl (23 kB)\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from requests[socks]>=2.11.1->tweepy) (3.0.4)\n",
      "Requirement already satisfied: idna<2.9,>=2.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from requests[socks]>=2.11.1->tweepy) (2.8)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from requests[socks]>=2.11.1->tweepy) (1.25.10)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from requests[socks]>=2.11.1->tweepy) (2020.6.20)\n",
      "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6; extra == \"socks\" in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from requests[socks]>=2.11.1->tweepy) (1.7.1)\n",
      "Collecting oauthlib>=3.0.0\n",
      "  Downloading oauthlib-3.1.0-py2.py3-none-any.whl (147 kB)\n",
      "\u001b[K     |████████████████████████████████| 147 kB 22.8 MB/s eta 0:00:01\n",
      "\u001b[?25hInstalling collected packages: oauthlib, requests-oauthlib, tweepy\n",
      "Successfully installed oauthlib-3.1.0 requests-oauthlib-1.3.0 tweepy-3.9.0\n",
      "\u001b[33mWARNING: You are using pip version 20.0.2; however, version 20.2.4 is available.\n",
      "You should consider upgrading via the '/home/ec2-user/anaconda3/envs/python3/bin/python -m pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install tweepy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Python libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymongo\n",
    "from pymongo import MongoClient\n",
    "import json\n",
    "import tweepy\n",
    "import twitter\n",
    "from pprint import pprint\n",
    "import configparser\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the Authorization Info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = configparser.ConfigParser()\n",
    "config.read('config.ini')\n",
    "\n",
    "CONSUMER_KEY      = config['mytwitter']['api_key']\n",
    "CONSUMER_SECRET   = config['mytwitter']['api_secrete']\n",
    "OAUTH_TOKEN       = config['mytwitter']['access_token']\n",
    "OATH_TOKEN_SECRET = config['mytwitter']['access_secrete']\n",
    "\n",
    "mongod_connect = config['mymongodb']['connection']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Connect to the MongoDB Cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'id_1'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "client = MongoClient(mongod_connect)\n",
    "db = client.gp8 # use or create a database named demo\n",
    "tweet_collection = db.lab9 #use or create a collection named tweet_collection\n",
    "tweet_collection.create_index([(\"id\", pymongo.ASCENDING)],unique = True) # make sure the collected tweets are unique"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Use the Streaming API to Collect Tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "stream_auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\n",
    "stream_auth.set_access_token(OAUTH_TOKEN, OATH_TOKEN_SECRET)\n",
    "\n",
    "strem_api = tweepy.API(stream_auth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "track = ['covid19'] # define the keywords, tweets contain election\n",
    "\n",
    "#locations = [-78.9326449,38.4150904,-78.8816972,38.4450731] #defin the location, in Harrisonburg, VA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1326342438856749056\n",
      "1326342438710087680\n",
      "1326342439867723777\n",
      "1326342439943229441\n",
      "1326342440408801281\n",
      "1326342440639459329\n",
      "1326342440974864385\n",
      "1326342441537040384\n",
      "1326342442271076353\n",
      "1326342442300416001\n",
      "1326342442426097664\n",
      "1326342443097350146\n",
      "1326342443206279168\n",
      "1326342443462176768\n",
      "1326342443814572033\n",
      "1326342443361464322\n",
      "1326342444414357504\n",
      "1326342444489662464\n",
      "1326342445769125888\n",
      "1326342447069163520\n",
      "1326342448767881217\n",
      "1326342451016175616\n",
      "1326342451322302464\n",
      "1326342452547117056\n",
      "1326342452878438400\n",
      "1326342452857462784\n",
      "1326342453297897479\n",
      "1326342455541854213\n",
      "1326342455638241280\n",
      "1326342456191840256\n",
      "1326342459169910784\n",
      "1326342459547389954\n",
      "1326342459044061184\n",
      "1326342461589950476\n",
      "1326342462542024704\n",
      "1326342462491779072\n",
      "1326342462865092608\n",
      "1326342464794370049\n",
      "1326342465796837377\n",
      "1326342468120444928\n",
      "1326342469152288769\n",
      "1326342469139779588\n",
      "1326342470419017728\n",
      "1326342470943207424\n",
      "1326342470888730626\n",
      "1326342471090106368\n",
      "1326342470976745472\n",
      "1326342471664721920\n",
      "1326342472495230976\n",
      "1326342471949844480\n",
      "1326342475754168320\n",
      "1326342475892498432\n",
      "1326342476282568704\n",
      "1326342477675048965\n",
      "1326342478308519938\n",
      "1326342478883024897\n",
      "1326342479331942401\n",
      "1326342479595991040\n",
      "1326342479663288320\n",
      "1326342479415795714\n",
      "1326342480908922881\n",
      "1326342482246971399\n",
      "1326342483178102785\n",
      "1326342482687352833\n",
      "1326342483723218944\n",
      "1326342484256055297\n",
      "1326342486613221376\n",
      "1326342487997358081\n",
      "1326342487905099777\n",
      "1326342489171587072\n",
      "1326342489633132544\n",
      "1326342489909899264\n",
      "1326342490178396160\n",
      "1326342492124540929\n",
      "1326342492199940096\n",
      "1326342494745812994\n",
      "1326342495211491329\n",
      "1326342497350656001\n",
      "1326342497128374273\n",
      "1326342499028230144\n",
      "1326342499699396608\n",
      "1326342499829510144\n",
      "1326342499934359552\n",
      "1326342500651593728\n",
      "1326342500857094144\n",
      "1326342501624655872\n",
      "1326342501784047619\n",
      "1326342502148923393\n",
      "1326342502358650881\n",
      "1326342502484422656\n",
      "1326342504401133568\n",
      "1326342505235820545\n",
      "1326342505504387073\n",
      "1326342505533681664\n",
      "1326342505885884416\n",
      "1326342506531983361\n",
      "1326342508620689409\n",
      "1326342510009061378\n",
      "1326342510600482819\n",
      "1326342511732862976\n",
      "1326342515104964608\n",
      "1326342515906260994\n",
      "1326342516334092289\n",
      "1326342515910463488\n",
      "1326342516451446784\n",
      "1326342518036811776\n",
      "1326342518435405824\n",
      "1326342518758322178\n",
      "1326342520754728960\n",
      "1326342520675037185\n",
      "1326342520754884608\n",
      "1326342520188641281\n",
      "1326342522306695169\n",
      "1326342522357084160\n",
      "1326342523170791430\n",
      "1326342523510517762\n",
      "1326342524324081664\n",
      "1326342525561548805\n",
      "1326342527553728514\n",
      "1326342530846240768\n",
      "1326342531546812417\n",
      "1326342531781701632\n",
      "1326342532364607488\n",
      "1326342532935151617\n",
      "1326342533283147776\n",
      "1326342533354385409\n",
      "1326342533719289856\n",
      "1326342534688354306\n",
      "1326342536068296705\n",
      "1326342539541164033\n",
      "1326342540291878912\n",
      "1326342541394980867\n",
      "1326342541898256384\n",
      "1326342544129552384\n",
      "1326342545341882368\n",
      "1326342546604367872\n",
      "1326342546172211200\n",
      "1326342548365971456\n",
      "1326342549129326594\n",
      "1326342552975409153\n",
      "1326342554577735681\n",
      "1326342555781378048\n",
      "1326342556582514688\n",
      "1326342556918177792\n",
      "1326342557308227584\n",
      "1326342557534736384\n",
      "1326342558293790720\n",
      "1326342558369402881\n",
      "1326342560609021953\n",
      "1326342561414455296\n",
      "1326342561934401536\n",
      "1326342564606337025\n",
      "1326342565256454144\n",
      "1326342565818470402\n",
      "1326342568964222977\n",
      "1326342569794670600\n",
      "1326342570226544641\n",
      "1326342570385920000\n",
      "1326342571052867584\n",
      "1326342571564658688\n",
      "1326342573015920642\n",
      "1326342573405966337\n",
      "1326342572978135046\n",
      "1326342573745639429\n",
      "1326342574114795521\n",
      "1326342574777507840\n",
      "1326342574701993989\n",
      "1326342576992088065\n",
      "1326342577625456642\n",
      "1326342577818230784\n",
      "1326342579730980865\n",
      "1326342580838293506\n",
      "1326342580947259395\n",
      "1326342583396741123\n",
      "1326342583405088768\n",
      "1326342586471084039\n",
      "1326342586970349575\n",
      "1326342587633065984\n",
      "1326342588262182913\n",
      "1326342588392112131\n",
      "1326342588530647040\n",
      "1326342591185637376\n",
      "1326342592783507456\n",
      "1326342597003063296\n",
      "1326342597372223488\n",
      "1326342597607116805\n",
      "1326342597900693504\n",
      "1326342598374666240\n",
      "1326342598735384576\n",
      "1326342599158927366\n",
      "1326342599200833536\n",
      "1326342599267872769\n",
      "1326342599599329283\n",
      "1326342599637020672\n",
      "1326342601902092289\n",
      "1326342608981958659\n",
      "1326342609212731393\n",
      "1326342609359368192\n",
      "1326342610894663680\n",
      "1326342613138460672\n",
      "1326342613960679426\n",
      "1326342614258311168\n",
      "1326342614426193920\n",
      "1326342614665322498\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mWantReadError\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/urllib3/contrib/pyopenssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    312\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 313\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    314\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mOpenSSL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSSL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSysCallError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/OpenSSL/SSL.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1839\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_lib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSSL_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ssl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1840\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_ssl_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ssl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1841\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/OpenSSL/SSL.py\u001b[0m in \u001b[0;36m_raise_ssl_error\u001b[0;34m(self, ssl, result)\u001b[0m\n\u001b[1;32m   1645\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0merror\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_lib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSSL_ERROR_WANT_READ\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1646\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mWantReadError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1647\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0merror\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_lib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSSL_ERROR_WANT_WRITE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mWantReadError\u001b[0m: ",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-16-11bc45f21258>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mmyStreamListener\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMyStreamListener\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mmyStream\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtweepy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mStream\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mauth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstrem_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlistener\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmyStreamListener\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mmyStream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m#  (locations = locations)   #Use either track or locations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36mfilter\u001b[0;34m(self, follow, track, is_async, locations, stall_warnings, languages, encoding, filter_level)\u001b[0m\n\u001b[1;32m    472\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'filter_level'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfilter_level\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    473\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'delimited'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'length'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 474\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mis_async\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    475\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    476\u001b[0m     def sitestream(self, follow, stall_warnings=False,\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36m_start\u001b[0;34m(self, is_async)\u001b[0m\n\u001b[1;32m    387\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_thread\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 389\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    391\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mon_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    287\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msnooze_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msnooze_time_step\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    288\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_connect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 289\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_loop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    290\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mssl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    291\u001b[0m                 \u001b[0;31m# This is still necessary, as a SSLError can actually be\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36m_read_loop\u001b[0;34m(self, resp)\u001b[0m\n\u001b[1;32m    337\u001b[0m             \u001b[0mlength\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclosed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 339\u001b[0;31m                 \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    340\u001b[0m                 \u001b[0mstripped_line\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mline\u001b[0m \u001b[0;31m# line is sometimes None so we need to check here\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mstripped_line\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36mread_line\u001b[0;34m(self, sep)\u001b[0m\n\u001b[1;32m    198\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m                 \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 200\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_chunk_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    201\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/urllib3/response.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, amt, decode_content, cache_content)\u001b[0m\n\u001b[1;32m    516\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    517\u001b[0m                 \u001b[0mcache_content\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 518\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mamt\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mfp_closed\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34mb\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    519\u001b[0m                 if (\n\u001b[1;32m    520\u001b[0m                     \u001b[0mamt\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, amt)\u001b[0m\n\u001b[1;32m    457\u001b[0m             \u001b[0;31m# Amount is given, implement using readinto\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    458\u001b[0m             \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytearray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mamt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 459\u001b[0;31m             \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadinto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    460\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mmemoryview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtobytes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    461\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    491\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchunked\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 493\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_readinto_chunked\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    494\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlength\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36m_readinto_chunked\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    586\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    587\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 588\u001b[0;31m                 \u001b[0mchunk_left\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_chunk_left\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    589\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mchunk_left\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mtotal_bytes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36m_get_chunk_left\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    554\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_safe_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# toss the CRLF at the end of the chunk\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 556\u001b[0;31m                 \u001b[0mchunk_left\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_next_chunk_size\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    557\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    558\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mIncompleteRead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36m_read_next_chunk_size\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    514\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_next_chunk_size\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    515\u001b[0m         \u001b[0;31m# Read the next chunk size from the file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 516\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    517\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    518\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mLineTooLong\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"chunk size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    584\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/urllib3/contrib/pyopenssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    323\u001b[0m                 \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    324\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mOpenSSL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSSL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWantReadError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 325\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait_for_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msocket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgettimeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    326\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"The read operation timed out\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    327\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/urllib3/util/wait.py\u001b[0m in \u001b[0;36mwait_for_read\u001b[0;34m(sock, timeout)\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[0mReturns\u001b[0m \u001b[0;32mTrue\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mthe\u001b[0m \u001b[0msocket\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mreadable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mFalse\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0mexpired\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \"\"\"\n\u001b[0;32m--> 146\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mwait_for_socket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mread\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/urllib3/util/wait.py\u001b[0m in \u001b[0;36mpoll_wait_for_socket\u001b[0;34m(sock, read, write, timeout)\u001b[0m\n\u001b[1;32m    105\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mpoll_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 107\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_retry_on_intr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdo_poll\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/urllib3/util/wait.py\u001b[0m in \u001b[0;36m_retry_on_intr\u001b[0;34m(fn, timeout)\u001b[0m\n\u001b[1;32m     41\u001b[0m     \u001b[0;31m# Modern Python, that retries syscalls by default\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_retry_on_intr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/urllib3/util/wait.py\u001b[0m in \u001b[0;36mdo_poll\u001b[0;34m(t)\u001b[0m\n\u001b[1;32m    103\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m             \u001b[0mt\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 105\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mpoll_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_retry_on_intr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdo_poll\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "class MyStreamListener(tweepy.StreamListener):\n",
    "    def on_status(self, status):\n",
    "        print (status.id_str)\n",
    "        try:\n",
    "            tweet_collection.insert_one(status._json)\n",
    "        except:\n",
    "            pass\n",
    "  \n",
    "    def on_error(self, status_code):\n",
    "        if status_code == 420:\n",
    "            #returning False in on_data disconnects the stream\n",
    "            return False\n",
    "myStreamListener = MyStreamListener()\n",
    "myStream = tweepy.Stream(auth = strem_api.auth, listener=myStreamListener)\n",
    "myStream.filter(track=track)#  (locations = locations)   #Use either track or locations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Use the REST API to Collect Tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "rest_auth = twitter.oauth.OAuth(OAUTH_TOKEN,OATH_TOKEN_SECRET,CONSUMER_KEY,CONSUMER_SECRET)\n",
    "rest_api = twitter.Twitter(auth=rest_auth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "count = 100 #number of returned tweets, default and max is 100\n",
    "#geocode = \"38.4392897,-78.9412224,50mi\"  # defin the location, in Harrisonburg, VA\n",
    "q = \"covid19\"                               #define the keywords, tweets contain election"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'Wed Nov 11 02:08:23 +0000 2020'\n",
      "'Wed Nov 11 02:08:23 +0000 2020'\n",
      "'Wed Nov 11 02:08:23 +0000 2020'\n",
      "'Wed Nov 11 02:08:23 +0000 2020'\n",
      "'Wed Nov 11 02:08:21 +0000 2020'\n",
      "'Wed Nov 11 02:08:21 +0000 2020'\n",
      "'Wed Nov 11 02:08:21 +0000 2020'\n",
      "'Wed Nov 11 02:08:21 +0000 2020'\n",
      "'Wed Nov 11 02:08:21 +0000 2020'\n",
      "'Wed Nov 11 02:08:20 +0000 2020'\n",
      "'Wed Nov 11 02:08:20 +0000 2020'\n",
      "'Wed Nov 11 02:08:20 +0000 2020'\n",
      "'Wed Nov 11 02:08:19 +0000 2020'\n",
      "'Wed Nov 11 02:08:19 +0000 2020'\n",
      "'Wed Nov 11 02:08:19 +0000 2020'\n",
      "'Wed Nov 11 02:08:19 +0000 2020'\n",
      "'Wed Nov 11 02:08:18 +0000 2020'\n",
      "'Wed Nov 11 02:08:17 +0000 2020'\n",
      "'Wed Nov 11 02:08:17 +0000 2020'\n",
      "'Wed Nov 11 02:08:16 +0000 2020'\n",
      "'Wed Nov 11 02:08:16 +0000 2020'\n",
      "'Wed Nov 11 02:08:15 +0000 2020'\n",
      "'Wed Nov 11 02:08:15 +0000 2020'\n",
      "'Wed Nov 11 02:08:14 +0000 2020'\n",
      "'Wed Nov 11 02:08:13 +0000 2020'\n",
      "'Wed Nov 11 02:08:13 +0000 2020'\n",
      "'Wed Nov 11 02:08:13 +0000 2020'\n",
      "'Wed Nov 11 02:08:12 +0000 2020'\n",
      "'Wed Nov 11 02:08:11 +0000 2020'\n",
      "'Wed Nov 11 02:08:11 +0000 2020'\n",
      "'Wed Nov 11 02:08:11 +0000 2020'\n",
      "'Wed Nov 11 02:08:11 +0000 2020'\n",
      "'Wed Nov 11 02:08:10 +0000 2020'\n",
      "'Wed Nov 11 02:08:10 +0000 2020'\n",
      "'Wed Nov 11 02:08:10 +0000 2020'\n",
      "'Wed Nov 11 02:08:10 +0000 2020'\n",
      "'Wed Nov 11 02:08:10 +0000 2020'\n",
      "'Wed Nov 11 02:08:09 +0000 2020'\n",
      "'Wed Nov 11 02:08:08 +0000 2020'\n",
      "'Wed Nov 11 02:08:08 +0000 2020'\n",
      "'Wed Nov 11 02:08:07 +0000 2020'\n",
      "'Wed Nov 11 02:08:07 +0000 2020'\n",
      "'Wed Nov 11 02:08:07 +0000 2020'\n",
      "'Wed Nov 11 02:08:06 +0000 2020'\n",
      "'Wed Nov 11 02:08:06 +0000 2020'\n",
      "'Wed Nov 11 02:08:06 +0000 2020'\n",
      "'Wed Nov 11 02:08:04 +0000 2020'\n",
      "'Wed Nov 11 02:08:04 +0000 2020'\n",
      "'Wed Nov 11 02:08:04 +0000 2020'\n",
      "'Wed Nov 11 02:08:04 +0000 2020'\n",
      "'Wed Nov 11 02:08:03 +0000 2020'\n",
      "'Wed Nov 11 02:08:03 +0000 2020'\n",
      "'Wed Nov 11 02:08:03 +0000 2020'\n",
      "'Wed Nov 11 02:08:03 +0000 2020'\n",
      "'Wed Nov 11 02:08:01 +0000 2020'\n",
      "'Wed Nov 11 02:08:01 +0000 2020'\n",
      "'Wed Nov 11 02:08:00 +0000 2020'\n",
      "'Wed Nov 11 02:07:59 +0000 2020'\n",
      "'Wed Nov 11 02:07:59 +0000 2020'\n",
      "'Wed Nov 11 02:07:58 +0000 2020'\n",
      "'Wed Nov 11 02:07:58 +0000 2020'\n",
      "'Wed Nov 11 02:07:57 +0000 2020'\n",
      "'Wed Nov 11 02:07:57 +0000 2020'\n",
      "'Wed Nov 11 02:07:57 +0000 2020'\n",
      "'Wed Nov 11 02:07:57 +0000 2020'\n",
      "'Wed Nov 11 02:07:57 +0000 2020'\n",
      "'Wed Nov 11 02:07:57 +0000 2020'\n",
      "'Wed Nov 11 02:07:56 +0000 2020'\n",
      "'Wed Nov 11 02:07:56 +0000 2020'\n",
      "'Wed Nov 11 02:07:56 +0000 2020'\n",
      "'Wed Nov 11 02:07:56 +0000 2020'\n",
      "'Wed Nov 11 02:07:56 +0000 2020'\n",
      "'Wed Nov 11 02:07:56 +0000 2020'\n",
      "'Wed Nov 11 02:07:55 +0000 2020'\n",
      "'Wed Nov 11 02:07:55 +0000 2020'\n",
      "'Wed Nov 11 02:07:55 +0000 2020'\n",
      "'Wed Nov 11 02:07:55 +0000 2020'\n",
      "'Wed Nov 11 02:07:55 +0000 2020'\n",
      "'Wed Nov 11 02:07:54 +0000 2020'\n",
      "'Wed Nov 11 02:07:54 +0000 2020'\n",
      "'Wed Nov 11 02:07:54 +0000 2020'\n",
      "'Wed Nov 11 02:07:53 +0000 2020'\n",
      "'Wed Nov 11 02:07:53 +0000 2020'\n",
      "'Wed Nov 11 02:07:53 +0000 2020'\n",
      "'Wed Nov 11 02:07:53 +0000 2020'\n",
      "'Wed Nov 11 02:07:53 +0000 2020'\n",
      "'Wed Nov 11 02:07:52 +0000 2020'\n",
      "'Wed Nov 11 02:07:52 +0000 2020'\n",
      "'Wed Nov 11 02:07:52 +0000 2020'\n",
      "'Wed Nov 11 02:07:51 +0000 2020'\n",
      "'Wed Nov 11 02:07:51 +0000 2020'\n",
      "'Wed Nov 11 02:07:50 +0000 2020'\n",
      "'Wed Nov 11 02:07:49 +0000 2020'\n",
      "'Wed Nov 11 02:07:48 +0000 2020'\n",
      "'Wed Nov 11 02:07:48 +0000 2020'\n",
      "'Wed Nov 11 02:07:48 +0000 2020'\n",
      "'Wed Nov 11 02:07:48 +0000 2020'\n",
      "'Wed Nov 11 02:07:48 +0000 2020'\n",
      "'Wed Nov 11 02:07:47 +0000 2020'\n",
      "'Wed Nov 11 02:07:47 +0000 2020'\n"
     ]
    }
   ],
   "source": [
    "search_results = rest_api.search.tweets( count=count,q=q) #you can use both q and geocode\n",
    "statuses = search_results[\"statuses\"]\n",
    "since_id_new = statuses[-1]['id']\n",
    "for statuse in statuses:\n",
    "    try:\n",
    "        tweet_collection.insert_one(statuse)\n",
    "        pprint(statuse['created_at'])# print the date of the collected tweets\n",
    "    except:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'Wed Nov 11 02:00:01 +0000 2020'\n",
      "'Wed Nov 11 02:00:01 +0000 2020'\n",
      "'Wed Nov 11 02:00:01 +0000 2020'\n",
      "'Wed Nov 11 02:00:01 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 02:00:00 +0000 2020'\n",
      "'Wed Nov 11 01:59:59 +0000 2020'\n",
      "'Wed Nov 11 01:59:59 +0000 2020'\n",
      "'Wed Nov 11 01:59:59 +0000 2020'\n",
      "'Wed Nov 11 01:59:59 +0000 2020'\n",
      "'Wed Nov 11 01:59:59 +0000 2020'\n",
      "'Wed Nov 11 01:59:58 +0000 2020'\n",
      "'Wed Nov 11 01:59:58 +0000 2020'\n",
      "'Wed Nov 11 01:59:58 +0000 2020'\n",
      "'Wed Nov 11 01:59:58 +0000 2020'\n",
      "'Wed Nov 11 01:59:58 +0000 2020'\n",
      "'Wed Nov 11 01:59:58 +0000 2020'\n",
      "'Wed Nov 11 01:59:58 +0000 2020'\n",
      "'Wed Nov 11 01:59:57 +0000 2020'\n",
      "'Wed Nov 11 01:59:57 +0000 2020'\n",
      "'Wed Nov 11 01:59:56 +0000 2020'\n",
      "'Wed Nov 11 01:59:56 +0000 2020'\n",
      "'Wed Nov 11 01:59:56 +0000 2020'\n",
      "'Wed Nov 11 01:59:56 +0000 2020'\n",
      "'Wed Nov 11 01:59:56 +0000 2020'\n",
      "'Wed Nov 11 01:59:56 +0000 2020'\n",
      "'Wed Nov 11 01:59:56 +0000 2020'\n",
      "'Wed Nov 11 01:59:54 +0000 2020'\n",
      "'Wed Nov 11 01:59:54 +0000 2020'\n",
      "'Wed Nov 11 01:59:54 +0000 2020'\n",
      "'Wed Nov 11 01:59:54 +0000 2020'\n",
      "'Wed Nov 11 01:59:54 +0000 2020'\n",
      "'Wed Nov 11 01:59:54 +0000 2020'\n",
      "'Wed Nov 11 01:59:53 +0000 2020'\n",
      "'Wed Nov 11 01:59:53 +0000 2020'\n",
      "'Wed Nov 11 01:59:53 +0000 2020'\n",
      "'Wed Nov 11 01:59:52 +0000 2020'\n",
      "'Wed Nov 11 01:59:52 +0000 2020'\n",
      "'Wed Nov 11 01:59:50 +0000 2020'\n",
      "'Wed Nov 11 01:59:50 +0000 2020'\n",
      "'Wed Nov 11 01:59:50 +0000 2020'\n",
      "'Wed Nov 11 01:59:50 +0000 2020'\n",
      "'Wed Nov 11 01:59:50 +0000 2020'\n",
      "'Wed Nov 11 01:59:50 +0000 2020'\n",
      "'Wed Nov 11 01:59:50 +0000 2020'\n",
      "'Wed Nov 11 01:59:49 +0000 2020'\n",
      "'Wed Nov 11 01:59:49 +0000 2020'\n",
      "'Wed Nov 11 01:59:49 +0000 2020'\n",
      "'Wed Nov 11 01:59:49 +0000 2020'\n",
      "'Wed Nov 11 01:59:48 +0000 2020'\n",
      "'Wed Nov 11 01:59:48 +0000 2020'\n",
      "'Wed Nov 11 01:59:48 +0000 2020'\n",
      "'Wed Nov 11 01:59:48 +0000 2020'\n",
      "'Wed Nov 11 01:59:48 +0000 2020'\n",
      "'Wed Nov 11 01:59:47 +0000 2020'\n",
      "'Wed Nov 11 01:59:47 +0000 2020'\n",
      "'Wed Nov 11 01:59:47 +0000 2020'\n",
      "'Wed Nov 11 01:59:46 +0000 2020'\n",
      "'Wed Nov 11 01:59:46 +0000 2020'\n",
      "'Wed Nov 11 01:59:46 +0000 2020'\n",
      "'Wed Nov 11 01:59:46 +0000 2020'\n",
      "'Wed Nov 11 01:59:45 +0000 2020'\n",
      "'Wed Nov 11 01:59:45 +0000 2020'\n",
      "'Wed Nov 11 01:59:45 +0000 2020'\n",
      "'Wed Nov 11 01:59:44 +0000 2020'\n",
      "'Wed Nov 11 01:59:44 +0000 2020'\n",
      "'Wed Nov 11 01:59:44 +0000 2020'\n",
      "'Wed Nov 11 01:59:44 +0000 2020'\n",
      "'Wed Nov 11 01:59:44 +0000 2020'\n",
      "'Wed Nov 11 01:59:44 +0000 2020'\n",
      "'Wed Nov 11 01:59:44 +0000 2020'\n",
      "'Wed Nov 11 01:59:44 +0000 2020'\n",
      "'Wed Nov 11 01:59:44 +0000 2020'\n",
      "'Wed Nov 11 01:59:43 +0000 2020'\n",
      "'Wed Nov 11 01:59:43 +0000 2020'\n",
      "'Wed Nov 11 01:59:43 +0000 2020'\n",
      "'Wed Nov 11 01:59:42 +0000 2020'\n",
      "'Wed Nov 11 01:59:42 +0000 2020'\n",
      "'Wed Nov 11 01:59:42 +0000 2020'\n",
      "'Wed Nov 11 01:59:42 +0000 2020'\n",
      "'Wed Nov 11 01:59:42 +0000 2020'\n",
      "'Wed Nov 11 01:59:42 +0000 2020'\n",
      "'Wed Nov 11 01:59:41 +0000 2020'\n",
      "'Wed Nov 11 01:59:40 +0000 2020'\n",
      "'Wed Nov 11 01:59:40 +0000 2020'\n",
      "'Wed Nov 11 01:59:39 +0000 2020'\n",
      "'Wed Nov 11 01:59:39 +0000 2020'\n",
      "'Wed Nov 11 01:59:39 +0000 2020'\n",
      "'Wed Nov 11 01:59:39 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:38 +0000 2020'\n",
      "'Wed Nov 11 01:59:37 +0000 2020'\n",
      "'Wed Nov 11 01:59:37 +0000 2020'\n",
      "'Wed Nov 11 01:59:37 +0000 2020'\n",
      "'Wed Nov 11 01:59:37 +0000 2020'\n",
      "'Wed Nov 11 01:59:37 +0000 2020'\n",
      "'Wed Nov 11 01:59:37 +0000 2020'\n",
      "'Wed Nov 11 01:59:37 +0000 2020'\n",
      "'Wed Nov 11 01:59:36 +0000 2020'\n",
      "'Wed Nov 11 01:59:36 +0000 2020'\n",
      "'Wed Nov 11 01:59:36 +0000 2020'\n",
      "'Wed Nov 11 01:59:36 +0000 2020'\n",
      "'Wed Nov 11 01:59:36 +0000 2020'\n",
      "'Wed Nov 11 01:59:35 +0000 2020'\n",
      "'Wed Nov 11 01:59:35 +0000 2020'\n",
      "'Wed Nov 11 01:59:35 +0000 2020'\n",
      "'Wed Nov 11 01:59:35 +0000 2020'\n",
      "'Wed Nov 11 01:59:35 +0000 2020'\n",
      "'Wed Nov 11 01:59:35 +0000 2020'\n",
      "'Wed Nov 11 01:59:34 +0000 2020'\n",
      "'Wed Nov 11 01:59:33 +0000 2020'\n",
      "'Wed Nov 11 01:59:33 +0000 2020'\n",
      "'Wed Nov 11 01:59:33 +0000 2020'\n",
      "'Wed Nov 11 01:59:33 +0000 2020'\n",
      "'Wed Nov 11 01:59:32 +0000 2020'\n",
      "'Wed Nov 11 01:59:32 +0000 2020'\n",
      "'Wed Nov 11 01:59:32 +0000 2020'\n",
      "'Wed Nov 11 01:59:32 +0000 2020'\n",
      "'Wed Nov 11 01:59:31 +0000 2020'\n",
      "'Wed Nov 11 01:59:31 +0000 2020'\n",
      "'Wed Nov 11 01:59:31 +0000 2020'\n",
      "'Wed Nov 11 01:59:30 +0000 2020'\n",
      "'Wed Nov 11 01:59:30 +0000 2020'\n",
      "'Wed Nov 11 01:59:30 +0000 2020'\n",
      "'Wed Nov 11 01:59:30 +0000 2020'\n",
      "'Wed Nov 11 01:59:30 +0000 2020'\n",
      "'Wed Nov 11 01:59:30 +0000 2020'\n",
      "'Wed Nov 11 01:59:29 +0000 2020'\n",
      "'Wed Nov 11 01:59:29 +0000 2020'\n",
      "'Wed Nov 11 01:59:29 +0000 2020'\n",
      "'Wed Nov 11 01:59:28 +0000 2020'\n",
      "'Wed Nov 11 01:59:28 +0000 2020'\n",
      "'Wed Nov 11 01:59:28 +0000 2020'\n",
      "'Wed Nov 11 01:59:27 +0000 2020'\n",
      "'Wed Nov 11 01:59:26 +0000 2020'\n",
      "'Wed Nov 11 01:59:26 +0000 2020'\n",
      "'Wed Nov 11 01:59:25 +0000 2020'\n",
      "'Wed Nov 11 01:59:25 +0000 2020'\n",
      "'Wed Nov 11 01:59:25 +0000 2020'\n",
      "'Wed Nov 11 01:59:25 +0000 2020'\n",
      "'Wed Nov 11 01:59:25 +0000 2020'\n",
      "'Wed Nov 11 01:59:25 +0000 2020'\n",
      "'Wed Nov 11 01:59:25 +0000 2020'\n",
      "'Wed Nov 11 01:59:25 +0000 2020'\n",
      "'Wed Nov 11 01:59:24 +0000 2020'\n",
      "'Wed Nov 11 01:59:24 +0000 2020'\n",
      "'Wed Nov 11 01:59:24 +0000 2020'\n",
      "'Wed Nov 11 01:59:24 +0000 2020'\n",
      "'Wed Nov 11 01:59:24 +0000 2020'\n",
      "'Wed Nov 11 01:59:24 +0000 2020'\n",
      "'Wed Nov 11 01:59:24 +0000 2020'\n",
      "'Wed Nov 11 01:59:23 +0000 2020'\n",
      "'Wed Nov 11 01:59:23 +0000 2020'\n",
      "'Wed Nov 11 01:59:23 +0000 2020'\n",
      "'Wed Nov 11 01:59:23 +0000 2020'\n",
      "'Wed Nov 11 01:59:23 +0000 2020'\n",
      "'Wed Nov 11 01:59:23 +0000 2020'\n",
      "'Wed Nov 11 01:59:23 +0000 2020'\n",
      "'Wed Nov 11 01:59:22 +0000 2020'\n",
      "'Wed Nov 11 01:59:22 +0000 2020'\n",
      "'Wed Nov 11 01:59:22 +0000 2020'\n",
      "'Wed Nov 11 01:59:22 +0000 2020'\n",
      "'Wed Nov 11 01:59:22 +0000 2020'\n",
      "'Wed Nov 11 01:59:21 +0000 2020'\n",
      "'Wed Nov 11 01:59:21 +0000 2020'\n",
      "'Wed Nov 11 01:59:21 +0000 2020'\n",
      "'Wed Nov 11 01:59:21 +0000 2020'\n",
      "'Wed Nov 11 01:59:20 +0000 2020'\n",
      "'Wed Nov 11 01:59:20 +0000 2020'\n",
      "'Wed Nov 11 01:59:20 +0000 2020'\n",
      "'Wed Nov 11 01:59:19 +0000 2020'\n",
      "'Wed Nov 11 01:59:19 +0000 2020'\n",
      "'Wed Nov 11 01:59:19 +0000 2020'\n",
      "'Wed Nov 11 01:59:19 +0000 2020'\n",
      "'Wed Nov 11 01:59:18 +0000 2020'\n",
      "'Wed Nov 11 01:59:18 +0000 2020'\n",
      "'Wed Nov 11 01:59:18 +0000 2020'\n",
      "'Wed Nov 11 01:59:17 +0000 2020'\n",
      "'Wed Nov 11 01:59:17 +0000 2020'\n",
      "'Wed Nov 11 01:59:17 +0000 2020'\n",
      "'Wed Nov 11 01:59:17 +0000 2020'\n",
      "'Wed Nov 11 01:59:16 +0000 2020'\n",
      "'Wed Nov 11 01:59:16 +0000 2020'\n",
      "'Wed Nov 11 01:59:16 +0000 2020'\n",
      "'Wed Nov 11 01:59:16 +0000 2020'\n",
      "'Wed Nov 11 01:59:15 +0000 2020'\n",
      "'Wed Nov 11 01:59:15 +0000 2020'\n",
      "'Wed Nov 11 01:59:14 +0000 2020'\n",
      "'Wed Nov 11 01:59:14 +0000 2020'\n",
      "'Wed Nov 11 01:59:14 +0000 2020'\n",
      "'Wed Nov 11 01:59:14 +0000 2020'\n",
      "'Wed Nov 11 01:59:13 +0000 2020'\n",
      "'Wed Nov 11 01:59:13 +0000 2020'\n",
      "'Wed Nov 11 01:59:13 +0000 2020'\n",
      "'Wed Nov 11 01:59:13 +0000 2020'\n",
      "'Wed Nov 11 01:59:13 +0000 2020'\n",
      "'Wed Nov 11 01:59:13 +0000 2020'\n",
      "'Wed Nov 11 01:59:12 +0000 2020'\n",
      "'Wed Nov 11 01:59:12 +0000 2020'\n",
      "'Wed Nov 11 01:59:12 +0000 2020'\n",
      "'Wed Nov 11 01:59:12 +0000 2020'\n",
      "'Wed Nov 11 01:59:12 +0000 2020'\n",
      "'Wed Nov 11 01:59:12 +0000 2020'\n",
      "'Wed Nov 11 01:59:12 +0000 2020'\n",
      "'Wed Nov 11 01:59:12 +0000 2020'\n",
      "'Wed Nov 11 01:59:11 +0000 2020'\n",
      "'Wed Nov 11 01:59:11 +0000 2020'\n",
      "'Wed Nov 11 01:59:11 +0000 2020'\n",
      "'Wed Nov 11 01:59:10 +0000 2020'\n",
      "'Wed Nov 11 01:59:10 +0000 2020'\n",
      "'Wed Nov 11 01:59:10 +0000 2020'\n",
      "'Wed Nov 11 01:59:10 +0000 2020'\n",
      "'Wed Nov 11 01:59:10 +0000 2020'\n",
      "'Wed Nov 11 01:59:09 +0000 2020'\n",
      "'Wed Nov 11 01:59:08 +0000 2020'\n",
      "'Wed Nov 11 01:59:08 +0000 2020'\n",
      "'Wed Nov 11 01:59:08 +0000 2020'\n",
      "'Wed Nov 11 01:59:08 +0000 2020'\n",
      "'Wed Nov 11 01:59:08 +0000 2020'\n",
      "'Wed Nov 11 01:59:08 +0000 2020'\n",
      "'Wed Nov 11 01:59:07 +0000 2020'\n",
      "'Wed Nov 11 01:59:07 +0000 2020'\n",
      "'Wed Nov 11 01:59:07 +0000 2020'\n",
      "'Wed Nov 11 01:59:07 +0000 2020'\n",
      "'Wed Nov 11 01:59:07 +0000 2020'\n",
      "'Wed Nov 11 01:59:07 +0000 2020'\n",
      "'Wed Nov 11 01:59:07 +0000 2020'\n",
      "'Wed Nov 11 01:59:06 +0000 2020'\n",
      "'Wed Nov 11 01:59:06 +0000 2020'\n",
      "'Wed Nov 11 01:59:05 +0000 2020'\n",
      "'Wed Nov 11 01:59:04 +0000 2020'\n",
      "'Wed Nov 11 01:59:04 +0000 2020'\n",
      "'Wed Nov 11 01:59:04 +0000 2020'\n",
      "'Wed Nov 11 01:59:03 +0000 2020'\n",
      "'Wed Nov 11 01:59:02 +0000 2020'\n",
      "'Wed Nov 11 01:59:02 +0000 2020'\n",
      "'Wed Nov 11 01:59:01 +0000 2020'\n",
      "'Wed Nov 11 01:59:01 +0000 2020'\n",
      "'Wed Nov 11 01:59:01 +0000 2020'\n",
      "'Wed Nov 11 01:59:01 +0000 2020'\n",
      "'Wed Nov 11 01:59:01 +0000 2020'\n",
      "'Wed Nov 11 01:59:01 +0000 2020'\n",
      "'Wed Nov 11 01:59:01 +0000 2020'\n",
      "'Wed Nov 11 01:59:00 +0000 2020'\n",
      "'Wed Nov 11 01:59:00 +0000 2020'\n",
      "'Wed Nov 11 01:59:00 +0000 2020'\n",
      "'Wed Nov 11 01:59:00 +0000 2020'\n",
      "'Wed Nov 11 01:59:00 +0000 2020'\n",
      "'Wed Nov 11 01:59:00 +0000 2020'\n",
      "'Wed Nov 11 01:58:59 +0000 2020'\n",
      "'Wed Nov 11 01:58:59 +0000 2020'\n",
      "'Wed Nov 11 01:58:59 +0000 2020'\n",
      "'Wed Nov 11 01:58:58 +0000 2020'\n",
      "'Wed Nov 11 01:58:58 +0000 2020'\n",
      "'Wed Nov 11 01:58:58 +0000 2020'\n",
      "'Wed Nov 11 01:58:58 +0000 2020'\n",
      "'Wed Nov 11 01:58:58 +0000 2020'\n",
      "'Wed Nov 11 01:58:57 +0000 2020'\n",
      "'Wed Nov 11 01:58:57 +0000 2020'\n",
      "'Wed Nov 11 01:58:57 +0000 2020'\n",
      "'Wed Nov 11 01:58:56 +0000 2020'\n",
      "'Wed Nov 11 01:58:55 +0000 2020'\n",
      "'Wed Nov 11 01:58:55 +0000 2020'\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-3ac304c7605d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mwhile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msince_id_new\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0msince_id_old\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0msince_id_old\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msince_id_new\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0msearch_results\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrest_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msearch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtweets\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mcount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_id\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0msince_id_new\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mstatuses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msearch_results\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"statuses\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0msince_id_new\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstatuses\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/twitter/api.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    332\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle_response_with_retry\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_handle_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_timeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/site-packages/twitter/api.py\u001b[0m in \u001b[0;36m_handle_response\u001b[0;34m(self, req, uri, arg_data, _timeout)\u001b[0m\n\u001b[1;32m    339\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'timeout'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_timeout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m             \u001b[0mhandle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0murllib_request\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murlopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Content-Type'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'image/jpeg'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'image/png'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(url, data, timeout, cafile, capath, cadefault, context)\u001b[0m\n\u001b[1;32m    221\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0mopener\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_opener\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 223\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mopener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    224\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    225\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minstall_opener\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopener\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m             \u001b[0mreq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmeth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    525\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 526\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    527\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    528\u001b[0m         \u001b[0;31m# post-process response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         \u001b[0mprotocol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    543\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 544\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    545\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    546\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhandler\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhandlers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    505\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1359\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mhttps_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1360\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1361\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1362\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1363\u001b[0m         \u001b[0mhttps_request\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAbstractHTTPHandler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_request_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1319\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# timeout error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1320\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1321\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1322\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1323\u001b[0m             \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1352\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1353\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1354\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1355\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1356\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    305\u001b[0m         \u001b[0;31m# read until we get a non-100 response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    306\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    309\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    266\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    267\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 268\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    269\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    270\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mLineTooLong\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"status line\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    584\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1010\u001b[0m                   \u001b[0;34m\"non-zero flags not allowed in calls to recv_into() on %s\"\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1011\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1012\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1013\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1014\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Read on closed or unwrapped SSL socket.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 874\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    875\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mSSLError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mSSL_ERROR_EOF\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msuppress_ragged_eofs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/python3/lib/python3.6/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    629\u001b[0m         \"\"\"\n\u001b[1;32m    630\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 631\u001b[0;31m             \u001b[0mv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    632\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    633\u001b[0m             \u001b[0mv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "since_id_old = 0\n",
    "while(since_id_new != since_id_old):\n",
    "    since_id_old = since_id_new\n",
    "    search_results = rest_api.search.tweets( count=count,q=q, max_id= since_id_new)\n",
    "    statuses = search_results[\"statuses\"]\n",
    "    since_id_new = statuses[-1]['id']\n",
    "    for statuse in statuses:\n",
    "        try:\n",
    "            tweet_collection.insert_one(statuse)\n",
    "            pprint(statuse['created_at']) # print the date of the collected tweets\n",
    "        except:\n",
    "            pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## View the Collected Tweets "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2284\n",
      "2016\n"
     ]
    }
   ],
   "source": [
    "print(tweet_collection.estimated_document_count())# number of tweets collected\n",
    "\n",
    "user_cursor = tweet_collection.distinct(\"user.id\")\n",
    "print (len(user_cursor)) # number of unique Twitter users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'text_index'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_collection.create_index([(\"text\", pymongo.TEXT)], name='text_index', default_language='english') # create a text index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_cursor = tweet_collection.find({\"$text\": {\"$search\": \"election\"}}) # return tweets contain vote"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----\n",
      "name: Milena Andreone\n",
      "text: @nytimes After Election Day no more covid19. Incredible!!!!\n",
      "----\n",
      "name: Fix It Now Wisconsin\n",
      "text: @realDonaldTrump Where is the COVID19 relief you promised AFTER THE ELECTION @realDonaldTrump ???\n",
      "\n",
      "WHY AREN'T YOU W… https://t.co/IDkwf3e32u\n",
      "----\n",
      "name: anonymous troll\n",
      "text: RT @sri9011: #ProudOfElectionCommission for holding impartial Bihar elections and byelections in UP,Gujarat,Haryana,MP,Karnataka, Chattisga…\n",
      "----\n",
      "name: Anil Kishan Zutshi\n",
      "text: RT @sri9011: #ProudOfElectionCommission for holding impartial Bihar elections and byelections in UP,Gujarat,Haryana,MP,Karnataka, Chattisga…\n",
      "----\n",
      "name: Lauren Evoy Davis\n",
      "text: RT @tmprowell: .@GovLarryHogan (R) of MD: \"I think most people realize this election is over...it's time to move on.\" Says he has congratul…\n",
      "----\n",
      "name: Diversity is the only hope\n",
      "text: I thought the GOP promised us #COVID19 would go away after the election? \n",
      "\n",
      "Did they lie again? https://t.co/LGNZhtFFnV\n",
      "----\n",
      "name: Good Governance 🇮🇳\n",
      "text: #ProudOfElectionCommission for holding impartial Bihar elections and byelections in UP,Gujarat,Haryana,MP,Karnataka… https://t.co/xSSNOtKN7d\n",
      "----\n",
      "name: EastEndResist\n",
      "text: Trump during the summer: \"We'll have a vaccine before Election day.\" Trump now: \"American people: You didn't re-ele… https://t.co/Tl9nQJfSHQ\n",
      "----\n",
      "name: The Eagle Is Ascending\n",
      "text: The Election was MADE SO TRANSPARENT, due to the #COVID19 Pandemic! In my opinion, Trump is just a disgusting Pig! https://t.co/gqB4QlLP4z\n",
      "----\n",
      "name: Rajesh Babu S\n",
      "text: RT @blsanthosh: The in this Pan India elections including Bihar exhibits the high level of endorsement for the way @narendramodi Govt navig…\n"
     ]
    }
   ],
   "source": [
    "for document in tweet_cursor[0:10]: # display the first 10 tweets from the query\n",
    "    try:\n",
    "        print ('----')\n",
    "#         pprint (document) # use pprint to print the entire tweet document\n",
    "   \n",
    "        print ('name:', document[\"user\"][\"name\"]) # user name\n",
    "        print ('text:', document[\"text\"])         # tweets\n",
    "    except:\n",
    "        print (\"***error in encoding\")\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_cursor = tweet_collection.find({\"$text\": {\"$search\": \"election\"}}) # return tweets contain vote"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>created_at</th>\n",
       "      <th>id</th>\n",
       "      <th>id_str</th>\n",
       "      <th>text</th>\n",
       "      <th>truncated</th>\n",
       "      <th>entities</th>\n",
       "      <th>metadata</th>\n",
       "      <th>source</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>...</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>favorited</th>\n",
       "      <th>retweeted</th>\n",
       "      <th>lang</th>\n",
       "      <th>retweeted_status</th>\n",
       "      <th>quoted_status_id</th>\n",
       "      <th>quoted_status_id_str</th>\n",
       "      <th>quoted_status</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5fab480460dcd968cb8153f8</td>\n",
       "      <td>Wed Nov 11 02:03:34 +0000 2020</td>\n",
       "      <td>1326344786454978560</td>\n",
       "      <td>1326344786454978560</td>\n",
       "      <td>@nytimes After Election Day no more covid19. I...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>1.326302e+18</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5fab480660dcd968cb8154b8</td>\n",
       "      <td>Wed Nov 11 02:02:36 +0000 2020</td>\n",
       "      <td>1326344545857114112</td>\n",
       "      <td>1326344545857114112</td>\n",
       "      <td>@realDonaldTrump Where is the COVID19 relief y...</td>\n",
       "      <td>True</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"https://mobile.twitter.com\" rel=\"nofo...</td>\n",
       "      <td>1.326344e+18</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5fab480260dcd968cb81533e</td>\n",
       "      <td>Wed Nov 11 02:04:27 +0000 2020</td>\n",
       "      <td>1326345012410425345</td>\n",
       "      <td>1326345012410425345</td>\n",
       "      <td>RT @sri9011: #ProudOfElectionCommission for ho...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hashtags': [{'text': 'ProudOfElectionCommiss...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>{'created_at': 'Wed Nov 11 02:03:51 +0000 2020...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5fab47fe60dcd968cb81515a</td>\n",
       "      <td>Wed Nov 11 02:06:47 +0000 2020</td>\n",
       "      <td>1326345597834551296</td>\n",
       "      <td>1326345597834551296</td>\n",
       "      <td>RT @sri9011: #ProudOfElectionCommission for ho...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hashtags': [{'text': 'ProudOfElectionCommiss...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/#!/download/ipad\" ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>{'created_at': 'Wed Nov 11 02:03:51 +0000 2020...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5fab47fc60dcd968cb8150c6</td>\n",
       "      <td>Wed Nov 11 02:07:28 +0000 2020</td>\n",
       "      <td>1326345770644205573</td>\n",
       "      <td>1326345770644205573</td>\n",
       "      <td>RT @tmprowell: .@GovLarryHogan (R) of MD: \"I t...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>{'created_at': 'Tue Nov 10 22:36:37 +0000 2020...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5fab479960dcd968cb815041</td>\n",
       "      <td>Wed Nov 11 02:08:11 +0000 2020</td>\n",
       "      <td>1326345952286879750</td>\n",
       "      <td>1326345952286879750</td>\n",
       "      <td>I thought the GOP promised us #COVID19 would g...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hashtags': [{'text': 'COVID19', 'indices': [...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"https://mobile.twitter.com\" rel=\"nofo...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.326337e+18</td>\n",
       "      <td>1326337486893641729</td>\n",
       "      <td>{'created_at': 'Wed Nov 11 01:34:33 +0000 2020...</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>5fab480460dcd968cb8153ba</td>\n",
       "      <td>Wed Nov 11 02:03:51 +0000 2020</td>\n",
       "      <td>1326344860572377089</td>\n",
       "      <td>1326344860572377089</td>\n",
       "      <td>#ProudOfElectionCommission for holding imparti...</td>\n",
       "      <td>True</td>\n",
       "      <td>{'hashtags': [{'text': 'ProudOfElectionCommiss...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/android\" ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5fab480a60dcd968cb815625</td>\n",
       "      <td>Wed Nov 11 02:01:01 +0000 2020</td>\n",
       "      <td>1326344145087160321</td>\n",
       "      <td>1326344145087160321</td>\n",
       "      <td>Trump during the summer: \"We'll have a vaccine...</td>\n",
       "      <td>True</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"https://mobile.twitter.com\" rel=\"nofo...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5fab480060dcd968cb815270</td>\n",
       "      <td>Wed Nov 11 02:05:26 +0000 2020</td>\n",
       "      <td>1326345257747886082</td>\n",
       "      <td>1326345257747886082</td>\n",
       "      <td>The Election was MADE SO TRANSPARENT, due to t...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hashtags': [{'text': 'COVID19', 'indices': [...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"https://mobile.twitter.com\" rel=\"nofo...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.326344e+18</td>\n",
       "      <td>1326343870028926978</td>\n",
       "      <td>{'created_at': 'Wed Nov 11 01:59:55 +0000 2020...</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5fab47fd60dcd968cb81513e</td>\n",
       "      <td>Wed Nov 11 02:06:53 +0000 2020</td>\n",
       "      <td>1326345623965106177</td>\n",
       "      <td>1326345623965106177</td>\n",
       "      <td>RT @blsanthosh: The in this Pan India election...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'iso_language_code': 'en', 'result_type': 're...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>349</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>en</td>\n",
       "      <td>{'created_at': 'Tue Nov 10 07:29:16 +0000 2020...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        _id                      created_at  \\\n",
       "0  5fab480460dcd968cb8153f8  Wed Nov 11 02:03:34 +0000 2020   \n",
       "1  5fab480660dcd968cb8154b8  Wed Nov 11 02:02:36 +0000 2020   \n",
       "2  5fab480260dcd968cb81533e  Wed Nov 11 02:04:27 +0000 2020   \n",
       "3  5fab47fe60dcd968cb81515a  Wed Nov 11 02:06:47 +0000 2020   \n",
       "4  5fab47fc60dcd968cb8150c6  Wed Nov 11 02:07:28 +0000 2020   \n",
       "5  5fab479960dcd968cb815041  Wed Nov 11 02:08:11 +0000 2020   \n",
       "6  5fab480460dcd968cb8153ba  Wed Nov 11 02:03:51 +0000 2020   \n",
       "7  5fab480a60dcd968cb815625  Wed Nov 11 02:01:01 +0000 2020   \n",
       "8  5fab480060dcd968cb815270  Wed Nov 11 02:05:26 +0000 2020   \n",
       "9  5fab47fd60dcd968cb81513e  Wed Nov 11 02:06:53 +0000 2020   \n",
       "\n",
       "                    id               id_str  \\\n",
       "0  1326344786454978560  1326344786454978560   \n",
       "1  1326344545857114112  1326344545857114112   \n",
       "2  1326345012410425345  1326345012410425345   \n",
       "3  1326345597834551296  1326345597834551296   \n",
       "4  1326345770644205573  1326345770644205573   \n",
       "5  1326345952286879750  1326345952286879750   \n",
       "6  1326344860572377089  1326344860572377089   \n",
       "7  1326344145087160321  1326344145087160321   \n",
       "8  1326345257747886082  1326345257747886082   \n",
       "9  1326345623965106177  1326345623965106177   \n",
       "\n",
       "                                                text  truncated  \\\n",
       "0  @nytimes After Election Day no more covid19. I...      False   \n",
       "1  @realDonaldTrump Where is the COVID19 relief y...       True   \n",
       "2  RT @sri9011: #ProudOfElectionCommission for ho...      False   \n",
       "3  RT @sri9011: #ProudOfElectionCommission for ho...      False   \n",
       "4  RT @tmprowell: .@GovLarryHogan (R) of MD: \"I t...      False   \n",
       "5  I thought the GOP promised us #COVID19 would g...      False   \n",
       "6  #ProudOfElectionCommission for holding imparti...       True   \n",
       "7  Trump during the summer: \"We'll have a vaccine...       True   \n",
       "8  The Election was MADE SO TRANSPARENT, due to t...      False   \n",
       "9  RT @blsanthosh: The in this Pan India election...      False   \n",
       "\n",
       "                                            entities  \\\n",
       "0  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "1  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "2  {'hashtags': [{'text': 'ProudOfElectionCommiss...   \n",
       "3  {'hashtags': [{'text': 'ProudOfElectionCommiss...   \n",
       "4  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "5  {'hashtags': [{'text': 'COVID19', 'indices': [...   \n",
       "6  {'hashtags': [{'text': 'ProudOfElectionCommiss...   \n",
       "7  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "8  {'hashtags': [{'text': 'COVID19', 'indices': [...   \n",
       "9  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "\n",
       "                                            metadata  \\\n",
       "0  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "1  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "2  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "3  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "4  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "5  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "6  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "7  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "8  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "9  {'iso_language_code': 'en', 'result_type': 're...   \n",
       "\n",
       "                                              source  in_reply_to_status_id  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...           1.326302e+18   \n",
       "1  <a href=\"https://mobile.twitter.com\" rel=\"nofo...           1.326344e+18   \n",
       "2  <a href=\"http://twitter.com/download/android\" ...                    NaN   \n",
       "3  <a href=\"http://twitter.com/#!/download/ipad\" ...                    NaN   \n",
       "4  <a href=\"http://twitter.com/download/android\" ...                    NaN   \n",
       "5  <a href=\"https://mobile.twitter.com\" rel=\"nofo...                    NaN   \n",
       "6  <a href=\"http://twitter.com/download/android\" ...                    NaN   \n",
       "7  <a href=\"https://mobile.twitter.com\" rel=\"nofo...                    NaN   \n",
       "8  <a href=\"https://mobile.twitter.com\" rel=\"nofo...                    NaN   \n",
       "9  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "\n",
       "   ... retweet_count  favorite_count favorited retweeted lang  \\\n",
       "0  ...             0               0     False     False   en   \n",
       "1  ...             0               2     False     False   en   \n",
       "2  ...             2               0     False     False   en   \n",
       "3  ...             2               0     False     False   en   \n",
       "4  ...             4               0     False     False   en   \n",
       "5  ...             0               0     False     False   en   \n",
       "6  ...             2               6     False     False   en   \n",
       "7  ...             0               0     False     False   en   \n",
       "8  ...             0               0     False     False   en   \n",
       "9  ...           349               0     False     False   en   \n",
       "\n",
       "                                    retweeted_status quoted_status_id  \\\n",
       "0                                                NaN              NaN   \n",
       "1                                                NaN              NaN   \n",
       "2  {'created_at': 'Wed Nov 11 02:03:51 +0000 2020...              NaN   \n",
       "3  {'created_at': 'Wed Nov 11 02:03:51 +0000 2020...              NaN   \n",
       "4  {'created_at': 'Tue Nov 10 22:36:37 +0000 2020...              NaN   \n",
       "5                                                NaN     1.326337e+18   \n",
       "6                                                NaN              NaN   \n",
       "7                                                NaN              NaN   \n",
       "8                                                NaN     1.326344e+18   \n",
       "9  {'created_at': 'Tue Nov 10 07:29:16 +0000 2020...              NaN   \n",
       "\n",
       "  quoted_status_id_str                                      quoted_status  \\\n",
       "0                  NaN                                                NaN   \n",
       "1                  NaN                                                NaN   \n",
       "2                  NaN                                                NaN   \n",
       "3                  NaN                                                NaN   \n",
       "4                  NaN                                                NaN   \n",
       "5  1326337486893641729  {'created_at': 'Wed Nov 11 01:34:33 +0000 2020...   \n",
       "6                  NaN                                                NaN   \n",
       "7                  NaN                                                NaN   \n",
       "8  1326343870028926978  {'created_at': 'Wed Nov 11 01:59:55 +0000 2020...   \n",
       "9                  NaN                                                NaN   \n",
       "\n",
       "   possibly_sensitive  \n",
       "0                 NaN  \n",
       "1                 NaN  \n",
       "2                 NaN  \n",
       "3                 NaN  \n",
       "4                 NaN  \n",
       "5               False  \n",
       "6                 NaN  \n",
       "7                 NaN  \n",
       "8                True  \n",
       "9                 NaN  \n",
       "\n",
       "[10 rows x 30 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_df = pd.DataFrame(list(tweet_cursor ))\n",
    "tweet_df[:10] #display the first 10 tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fd954ff08d0>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tweet_df[\"favorite_count\"].hist() # create a histogram show the favorite count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
